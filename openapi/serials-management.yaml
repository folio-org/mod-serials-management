openapi: 3.0.0
info:
  version: 2.0.0
  title: Folio Serials Management
  description: API for the Folio library services platform mod-serials-management app
servers:
  - url: https://folio-snapshot-okapi.dev.folio.org
  - url: https://folio-snapshot-2-okapi.dev.folio.org
security:
  - accessToken: []
  - okapiToken: []
paths:
  /serials-management/locales:
    get:
      summary: Get a set of locales
      operationId: getLocales
      parameters:
        - $ref: '#/components/parameters/keyLocales'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locales'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/refdata:
    get:
      operationId: getRefData
      summary: Get a set of reference data categories and values
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/stats'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RefDataResults'
                  - $ref: '#/components/schemas/RefDataResultsArray'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    post:
      summary: Create new reference data
      operationId: createRefData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefDataCategory'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefDataCategory'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/refdata/{uuid}:
    get:
      summary: Get a specified reference data category
      operationId: getRefDataCategory
      parameters:
        - name: uuid
          in: path
          description: The uuid of the reference data category to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefDataCategory'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    put:
      summary: Update reference data category
      operationId: putRefDataCategory
      parameters:
        - name: uuid
          in: path
          description: The uuid of the reference data category to be put
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefDataCategory'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefDataCategory'
        '400':
          description: Bad request error
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    delete:
      summary: Delete a specified reference data category
      operationId: deleteRefDataCategory
      parameters:
        - name: uuid
          in: path
          description: The uuid of the reference data category to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/refdata/{domain}/{property}:
    get:
      summary: Get a specified reference data property
      operationId: getReferenceDataPropertybyDomainandField
      parameters:
        - name: domain
          in: path
          description: The DomainClass of the reference data category to which the property belongs
          required: true
          schema:
            type: string
        - name: property
          in: path
          description: The FieldName of the reference data property to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefData'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/serials:
    get:
      summary: Get a set of serial records
      operationId: getSerials
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/stats'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SerialResults'
                  - $ref: '#/components/schemas/SerialResultsArray'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    post:
      summary: Create serial record
      operationId: postSerial
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Serial'
        description: requestBody description
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Serial'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/serials/{uuid}:
    get:
      summary: Get a specified serial record
      operationId: getSerial
      parameters:
        - name: uuid
          in: path
          description: The uuid of the serial record to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Serial'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    put:
      summary: Update serial record
      operationId: putSerial
      parameters:
        - name: uuid
          in: path
          description: The uuid of the serial record to be put
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Serial'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Serial'
        '400':
          description: Bad request error
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    delete:
      summary: Delete a specified serial record
      operationId: deleteSerial
      parameters:
        - name: uuid
          in: path
          description: The uuid of the serial record to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/modelRulesets:
    get:
      summary: Get a set of model ruleset records
      operationId: getModelRulesets
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/stats'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ModelRulesetResults'
                  - $ref: '#/components/schemas/ModelRulesetResultsArray'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    post:
      summary: Create model ruleset record
      operationId: postModelRuleset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modelRuleset'
        description: Ruleset JSON
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/modelRulesets/{uuid}:
    get:
      summary: Get a specified model ruleset record
      operationId: getModelRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the model ruleset record to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    delete:
      summary: Delete a specified model ruleset record
      operationId: deleteModelRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the model ruleset record to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/rulesets:
    get:
      summary: Get a set of ruleset records
      operationId: getRulesets
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/stats'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SerialRulesetResults'
                  - $ref: '#/components/schemas/SerialRulesetResultsArray'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    post:
      summary: Create ruleset record
      operationId: postRuleset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serialRuleset'
        description: Ruleset JSON
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/rulesets/{uuid}:
    get:
      summary: Get a specified ruleset
      operationId: getRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset record to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    delete:
      summary: Delete a specified ruleset
      operationId: deleteRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/rulesets/{uuid}/active:
    post:
      summary: Activate a ruleset
      operationId: activateRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset to be activated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serialRuleset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/rulesets/{uuid}/deprecated:
    post:
      summary: Deprecate a ruleset
      operationId: depricateRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset to be deprecated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serialRuleset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/rulesets/{uuid}/draft:
    post:
      summary: Make a ruleset a draft
      operationId: draftRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset to be made a draft
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serialRuleset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/rulesets/{uuid}/replaceAndDelete:
    post:
      summary: Replace and delete an unused publication pattern
      operationId: replaceAndDeleteRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset record to be replaced and deleted
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serialRuleset'
        description: Ruleset JSON
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/rulesets/{uuid}/replaceAndDeprecate:
    post:
      summary: Replace and deprecate an used publicaiton patter
      operationId: replaceAndDeprecateRuleset
      parameters:
        - name: uuid
          in: path
          description: The uuid of the ruleset record to be replaced and deprecated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serialRuleset'
        description: Ruleset JSON
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerialRuleset'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/predictedPieces:
    get:
      summary: Get a set of predicted piece sets
      operationId: getPredictedPieceSets
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/term'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/stats'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PredictedPieceSetResults'
                  - $ref: '#/components/schemas/PredictedPieceSetResultsArray'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/predictedPieces/{uuid}:
    get:
      summary: Get a specified predicted piece set
      operationId: getPredictedPieceSet
      parameters:
        - name: uuid
          in: path
          description: The uuid of the predicted piece set to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictedPieceSet'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
    put:
      summary: Update predicted piece set
      operationId: putPredictedPieceSet
      parameters:
        - name: uuid
          in: path
          description: The uuid of the predicted piece set to be put
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictedPieceSet'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictedPieceSet'
        '400':
          description: Bad request error
        '404':
          description: Not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpError'
        '500':
          description: Internal server error
  /serials-management/predictedPieces/generate:
    post:
      summary: Preview predicted pieces
      operationId: previewPieces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictedPieceSetGenerator'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictedPieceSet'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /serials-management/predictedPieces/create:
    post:
      summary: Create predicted pieces
      operationId: createPieces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictedPieceSetGenerator'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictedPieceSet'
        '400':
          description: Bad request error
        '403':
          description: Forbidden
        '500':
          description: Internal server error
components:
  securitySchemes:
    okapiToken:
      type: apiKey
      in: header
      name: x-okapi-token
    accessToken:
      type: apiKey
      in: cookie
      name: folioAccessToken
  parameters:
    keyLocales:
      in: query
      name: keyLocales
      required: false
      schema:
        type: boolean
        default: true
    filters:
      in: query
      name: filters
      required: false
      schema:
        type: string
    match:
      in: query
      name: match
      required: false
      schema:
        type: string
    term:
      in: query
      name: term
      required: false
      schema:
        type: string
    sort:
      in: query
      name: sort
      required: false
      schema:
        type: string
    stats:
      in: query
      name: stats
      required: false
      schema:
        type: boolean
    perPage:
      in: query
      name: perPage
      required: false
      schema:
        type: integer
    offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
  schemas:
    Locales:
      type: array
      items:
        type: object
        properties:
          label:
            type: string
          value:
            type: string
    RefData:
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        value:
          type: string
    RefDataCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        internal:
          type: boolean
        desc:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/RefData'
    RefDataResults:
      type: array
      items:
        $ref: '#/components/schemas/RefDataCategory'
    RefDataResultsArray:
      type: object
      required:
        - results
      properties:
        results:
          $ref: '#/components/schemas/RefDataResults'
        meta:
          type: object
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        totalRecords:
          type: integer
    HttpError:
      type: object
      properties:
        message:
          type: string
        error:
          type: integer
        path:
          type: string
    SerialOrderLine:
      type: object
      properties:
        owner:
          type: object
          properties:
            id:
              type: string
              format: uuid
        title:
          type: string
        titleId:
          type: string
          format: uuid
    TimeUnit:
      type: object
      properties:
        value:
          type: string
          enum:
            - day
            - week
            - month
            - year
        id:
          type: string
          format: uuid
        label:
          type: string
    RecurrencePatternDay:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
    RecurrencePatternMonthDate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        day:
          type: integer
          maximum: 31
          minimum: 1
    RecurrencePatternMonthWeekday:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        week:
          type: integer
          minimum: 1
          maximum: 4
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    RecurrencePatternWeek:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    RecurrencePatternYearDate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        day:
          type: integer
          minimum: 1
          maximum: 31
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    RecurrencePatternYearMonthWeekday:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        week:
          type: integer
          minimum: 1
          maximum: 4
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    RecurrencePatternYearWeekday:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        week:
          type: integer
          minimum: 1
          maximum: 4
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    RecurrencePatternType:
      type: object
      properties:
        value:
          type: string
          enum:
            - day
            - week
            - month_date
            - month_weekday
            - year_date
            - year_weekday
            - year_month_weekday
        id:
          type: string
          format: uuid
        label:
          type: string
    RecurrenceRule:
      type: object
      properties:
        ordinal:
          type: integer
        pattern:
          oneOf:
            - $ref: '#/components/schemas/RecurrencePatternDay'
            - $ref: '#/components/schemas/RecurrencePatternMonthDate'
            - $ref: '#/components/schemas/RecurrencePatternMonthWeekday'
            - $ref: '#/components/schemas/RecurrencePatternWeek'
            - $ref: '#/components/schemas/RecurrencePatternYearDate'
            - $ref: '#/components/schemas/RecurrencePatternYearMonthWeekday'
            - $ref: '#/components/schemas/RecurrencePatternYearWeekday'
        patternType:
          $ref: '#/components/schemas/RecurrencePatternType'
        timeUnit:
          $ref: '#/components/schemas/TimeUnit'
    OmissionPatternDay:
      type: object
      required:
        - day
      properties:
        id:
          type: string
          format: uuid
        day:
          type: integer
    OmissionPatternDayMonth:
      type: object
      required:
        - day
        - month
      properties:
        id:
          type: string
          format: uuid
        day:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternDayWeek:
      type: object
      required:
        - week
        - weekday
      properties:
        id:
          type: string
          format: uuid
        week:
          type: integer
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternDayWeekday:
      type: object
      required:
        - weekday
      properties:
        id:
          type: string
          format: uuid
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternDayWeekMonth:
      type: object
      required:
        - weekday
        - week
        - month
      properties:
        id:
          type: string
          format: uuid
        weekday:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        week:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternIssue:
      type: object
      required:
        - issue
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
    OmissionPatternIssueMonth:
      type: object
      required:
        - issue
        - month
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternIssueWeek:
      type: object
      required:
        - issue
        - month
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
        week:
          type: integer
    OmissionPatternIssueWeekMonth:
      type: object
      required:
        - issue
        - week
        - month
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
        week:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternMonth:
      type: object
      required:
        - monthFrom
        - isRange
      properties:
        id:
          type: string
          format: uuid
        monthFrom:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        monthTo:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        isRange:
          type: boolean
    OmissionPatternWeek:
      type: object
      required:
        - weekFrom
        - isRange
      properties:
        id:
          type: string
          format: uuid
        weekFrom:
          type: integer
        weekTo:
          type: integer
        isRange:
          type: boolean
    OmissionPatternWeekMonth:
      type: object
      required:
        - week
        - month
      properties:
        id:
          type: string
          format: uuid
        week:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    OmissionPatternType:
      type: object
      properties:
        value:
          type: string
          enum:
            - day
            - day_month
            - day_week
            - day_weekday
            - day_week_month
            - week
            - week_month
            - month
            - issue
            - issue_week
            - issue_week_month
            - issue_month
        id:
          type: string
          format: uuid
        label:
          type: string
    OmissionRule:
      type: object
      properties:
        pattern:
          oneOf:
            - $ref: '#/components/schemas/OmissionPatternDay'
            - $ref: '#/components/schemas/OmissionPatternDayMonth'
            - $ref: '#/components/schemas/OmissionPatternDayWeek'
            - $ref: '#/components/schemas/OmissionPatternDayWeekday'
            - $ref: '#/components/schemas/OmissionPatternDayWeekMonth'
            - $ref: '#/components/schemas/OmissionPatternIssue'
            - $ref: '#/components/schemas/OmissionPatternIssueMonth'
            - $ref: '#/components/schemas/OmissionPatternIssueWeek'
            - $ref: '#/components/schemas/OmissionPatternIssueWeekMonth'
            - $ref: '#/components/schemas/OmissionPatternMonth'
            - $ref: '#/components/schemas/OmissionPatternWeek'
            - $ref: '#/components/schemas/OmissionPatternWeekMonth'
        patternType:
          $ref: '#/components/schemas/OmissionPatternType'
        timeUnit:
          $ref: '#/components/schemas/TimeUnit'
    Omission:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/OmissionRule'
    CombinationPatternIssue:
      type: object
      required:
        - issue
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
    CombinationPatternIssueMonth:
      type: object
      required:
        - issue
        - month
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    CombinationPatternIssueWeek:
      type: object
      required:
        - issue
        - month
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
        week:
          type: integer
    CombinationPatternIssueWeekMonth:
      type: object
      required:
        - issue
        - week
        - month
      properties:
        id:
          type: string
          format: uuid
        issue:
          type: integer
        week:
          type: integer
        month:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    CombinationPatternType:
      type: object
      properties:
        value:
          type: string
          enum:
            - issue
            - issue_week
            - issue_week_month
            - issue_month
        id:
          type: string
          format: uuid
        label:
          type: string
    CombinationRule:
      type: object
      properties:
        issuesToCombine:
          type: integer
        pattern:
          oneOf:
            - $ref: '#/components/schemas/CombinationPatternIssue'
            - $ref: '#/components/schemas/CombinationPatternIssueMonth'
            - $ref: '#/components/schemas/CombinationPatternIssueWeek'
            - $ref: '#/components/schemas/CombinationPatternIssueWeekMonth'
        patternType:
          $ref: '#/components/schemas/CombinationPatternType'
        timeUnit:
          $ref: '#/components/schemas/TimeUnit'
    Combination:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/CombinationRule'
    Recurrence:
      type: object
      required:
        - timeUnit
      properties:
        timeUnit:
          $ref: '#/components/schemas/TimeUnit'
        period:
          type: integer
        issues:
          type: integer
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RecurrenceRule'
        omission:
          $ref: '#/components/schemas/Omission'
        combination:
          $ref: '#/components/schemas/Combination'
        templateConfig:
          $ref: '#/components/schemas/TemplateConfiguration'
        owner:
          $ref: '#/components/schemas/Serial'
    TemplateConfiguration:
      type: object
      required:
        - owner
        - rules
        - templateString
      properties:
        id:
          type: string
          format: uuid
        owner:
          $ref: '#/components/schemas/SerialRuleset'
        templateString:
          type: string
        chronologyRules:
          type: array
          items:
            $ref: '#/components/schemas/ChronologyTemplateMetadataRule'
        enumerationRules:
          type: array
          items:
            $ref: '#/components/schemas/EnumerationTemplateMetadataRule'
    Serial:
      type: object
      required:
        - status
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        serialStatus:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        orderLine:
          $ref: '#/components/schemas/SerialOrderLine'
        serialRulesets:
          type: array
          items:
            $ref: '#/components/schemas/serialRuleset'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/SerialNote'
        dateCreated:
          type: string
          format: datetime
        lastUpdated:
          type: string
          format: datetime
    SerialRuleset:
      type: object
      required:
        - rulesetStatus
        - owner
      properties:
        id:
          type: string
          format: uuid
        rulesetStatus:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        description:
          type: string
        recurrence:
          $ref: '#/components/schemas/Recurrence'
        omission:
          $ref: '#/components/schemas/Omission'
        combination:
          $ref: '#/components/schemas/Combination'
        templateConfig:
          $ref: '#/components/schemas/TemplateConfiguration'
        owner:
          oneOf:
            - $ref: '#/components/schemas/Serial'
            - $ref: '#/components/schemas/ModelRuleset'
        rulesetNumber:
          type: string
    ModelRuleset:
      type: object
      required:
        - name
        - modelRulesetStatus
      properties:
        id:
          type: string
          format: uuid
        dateCreated:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        exampleLabel:
          type: string
        modelRulesetStatus:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        serialRuleset:
          $ref: '#/components/schemas/SerialRuleset'
    ChronologyDateTMRF:
      type: object
      required:
        - weekdayFormat
        - monthDayFormat
        - monthFormat
        - yearFormat
      properties:
        id:
          type: string
          format: uuid
        weekdayFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        monthDayFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        monthFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        yearFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    ChronologyMonthTMRF:
      type: object
      required:
        - monthFormat
        - yearFormat
      properties:
        id:
          type: string
          format: uuid
        monthFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        yearFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    ChronologyYearTMRF:
      type: object
      required:
        - yearFormat
      properties:
        id:
          type: string
          format: uuid
        yearFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    ChronologyTemplateMetadataRule:
      type: object
      required:
        - ruleLocale
        - ruleFormat
      properties:
        id:
          type: string
          format: uuid
        index:
          type: integer
        templateMetadataRuleFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        ruleFormat:
          oneOf:
            - $ref: '#/components/schemas/ChronologyDateTMRF'
            - $ref: '#/components/schemas/ChronologyMonthTMRF'
            - $ref: '#/components/schemas/ChronologyYearTMRF'
        ruleLocale:
          type: string
    EnumerationNumericLevelTMRF:
      type: object
      required:
        - index
        - units
        - format
        - sequence
      properties:
        id:
          type: string
          format: uuid
        index:
          type: integer
        units:
          type: integer
        format:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        sequence:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        internalNote:
          type: string
    EnumerationNumericTMRF:
      type: object
      required:
        - levels
      properties:
        id:
          type: string
          format: uuid
        levels:
          type: array
          items:
            $ref: '#/components/schemas/EnumerationNumericLevelTMRF'
    RefDataIDRequired:
      allOf:
        - $ref: '#/components/schemas/RefData'
        - type: object
          required:
            - id
    EnumerationTextualLevelTMRF:
      type: object
      required:
        - index
        - units
      properties:
        id:
          type: string
          format: uuid
        index:
          type: integer
        units:
          type: integer
        staticValue:
          type: string
        refdataValue:
          $ref: '#/components/schemas/RefDataIDRequired'
        internalNote:
          type: string
    EnumerationTextualTMRF:
      type: object
      required:
        - levels
        - refdataCategory
      properties:
        id:
          type: string
          format: uuid
        refdataCategory:
          $ref: '#/components/schemas/RefDataCategory'
        levels:
          type: array
          items:
            $ref: '#/components/schemas/EnumerationTextualLevelTMRF'
    EnumerationTemplateMetadataRule:
      type: object
      required:
        - ruleFormat
      properties:
        id:
          type: string
          format: uuid
        index:
          type: integer
        templateMetadataRuleFormat:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        ruleFormat:
          oneOf:
            - $ref: '#/components/schemas/EnumerationNumericTMRF'
            - $ref: '#/components/schemas/EnumerationTextualTMRF'
    serialRuleset:
      type: object
      required:
        - rulesetStatus
        - owner
      properties:
        id:
          type: string
          format: uuid
        rulesetStatus:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        description:
          type: string
        recurrence:
          $ref: '#/components/schemas/Recurrence'
        omission:
          $ref: '#/components/schemas/Omission'
        combination:
          $ref: '#/components/schemas/Combination'
        templateConfig:
          $ref: '#/components/schemas/TemplateConfiguration'
        owner:
          oneOf:
            - $ref: '#/components/schemas/Serial'
            - $ref: '#/components/schemas/ModelRuleset'
        rulesetNumber:
          type: string
    SerialNote:
      type: object
      required:
        - text
      properties:
        id:
          type: string
          format: uuid
        note:
          type: string
        owner:
          $ref: '#/components/schemas/Serial'
    SerialResults:
      type: array
      items:
        $ref: '#/components/schemas/Serial'
    SerialResultsArray:
      type: object
      required:
        - results
      properties:
        results:
          $ref: '#/components/schemas/SerialResults'
        meta:
          type: object
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        totalRecords:
          type: integer
    ModelRulesetResults:
      type: array
      items:
        $ref: '#/components/schemas/ModelRuleset'
    ModelRuleSetResults:
      type: array
      items:
        $ref: '#/components/schemas/ModelRuleset'
    ModelRulesetResultsArray:
      type: object
      required:
        - results
      properties:
        results:
          $ref: '#/components/schemas/ModelRuleSetResults'
        meta:
          type: object
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        totalRecords:
          type: integer
    modelRuleset:
      type: object
      required:
        - name
        - modelRulesetStatus
      properties:
        id:
          type: string
          format: uuid
        dateCreated:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        exampleLabel:
          type: string
        modelRulesetStatus:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
        serialRuleset:
          $ref: '#/components/schemas/SerialRuleset'
    SerialRulesetResults:
      type: array
      items:
        $ref: '#/components/schemas/SerialRuleset'
    SerialRulesetResultsArray:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SerialRulesetResults'
        meta:
          type: object
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        totalRecords:
          type: integer
    EnumerationLevelUCTMT:
      type: object
      required:
        - index
        - value
        - rawValue
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
        rawValue:
          type: integer
        index:
          type: integer
        valueFormat:
          $ref: '#/components/schemas/RefData'
    EnumerationUCTMT:
      type: object
      properties:
        value:
          type: string
        levels:
          $ref: '#/components/schemas/EnumerationLevelUCTMT'
    ChronologyUCTMT:
      type: object
      properties:
        weekday:
          type: string
        monthDay:
          type: string
        month:
          type: string
        year:
          type: string
    UserConfiguredTemplateMetadata:
      type: object
      required:
        - index
        - metadataType
      properties:
        id:
          type: string
          format: uuid
        index:
          type: integer
        metadataType:
          oneOf:
            - $ref: '#/components/schemas/EnumerationUCTMT'
            - $ref: '#/components/schemas/ChronologyUCTMT'
        userConfiguredMetadataType:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/RefData'
    TemplateMetadata:
      type: object
      required:
        - standard
      properties:
        id:
          type: string
          format: uuid
        userConfigured:
          type: array
          items:
            $ref: '#/components/schemas/UserConfiguredTemplateMetadata'
    ReceivingPiece:
      type: object
      required:
        - receivingId
      properties:
        id:
          type: string
          format: uuid
        receivingId:
          type: string
          format: uuid
    InternalPiece:
      type: object
      properties:
        id:
          type: string
          format: uuid
        class:
          type: string
        templateString:
          type: string
        label:
          type: string
        receivingId:
          type: string
          format: uuid
        receivingPieces:
          type: array
          items:
            $ref: '#/components/schemas/ReceivingPiece'
    InternalRecurrencePiece:
      allOf:
        - $ref: '#/components/schemas/InternalPiece'
        - type: object
          properties:
            recurrenceRule:
              $ref: '#/components/schemas/RecurrenceRule'
            date:
              type: string
              format: date
    CombinationOrigin:
      allOf:
        - $ref: '#/components/schemas/InternalPiece'
        - type: object
          properties:
            combinationRule:
              $ref: '#/components/schemas/CombinationRule'
    InternalCombinationPiece:
      type: object
      allOf:
        - $ref: '#/components/schemas/InternalPiece'
        - type: object
          properties:
            recurrencePieces:
              type: array
              items:
                $ref: '#/components/schemas/InternalRecurrencePiece'
            combinationOrigins:
              type: array
              items:
                $ref: '#/components/schemas/CombinationOrigin'
    OmissionOrigin:
      allOf:
        - $ref: '#/components/schemas/InternalPiece'
        - type: object
          properties:
            omissionRule:
              $ref: '#/components/schemas/OmissionRule'
    InternalOmissionPiece:
      allOf:
        - $ref: '#/components/schemas/InternalPiece'
        - type: object
          properties:
            omissionOrigins:
              type: array
              items:
                $ref: '#/components/schemas/OmissionOrigin'
            date:
              type: string
              format: date
    PredictedPieceSet:
      type: object
      required:
        - startDate
        - pieces
        - ruleSet
      properties:
        continuationPieceRecurrenceMetadata:
          $ref: '#/components/schemas/TemplateMetadata'
        dateCreated:
          type: string
          format: datetime
        id:
          type: string
          format: uuid
        initialPieceRecurrenceMetadata:
          $ref: '#/components/schemas/TemplateMetadata'
        lastUpdated:
          type: string
          format: datetime
        pieces:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/InternalCombinationPiece'
              - $ref: '#/components/schemas/InternalOmissionPiece'
              - $ref: '#/components/schemas/InternalRecurrencePiece'
        ruleset:
          $ref: '#/components/schemas/SerialRuleset'
        startDate:
          type: string
          format: date
        numberOfCycles:
          type: integer
        note:
          type: string
    PredictedPieceSetResults:
      type: array
      items:
        $ref: '#/components/schemas/PredictedPieceSet'
    PredictedPieceSetResultsArray:
      type: object
      required:
        - results
      properties:
        results:
          $ref: '#/components/schemas/PredictedPieceSetResults'
        meta:
          type: object
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        totalRecords:
          type: integer
    PredictedPieceSetGenerator:
      allOf:
        - $ref: '#/components/schemas/SerialRuleset'
        - type: object
          properties:
            note:
              type: string
            numberOfCycles:
              type: integer
            startingValues:
              type: array
              items:
                $ref: '#/components/schemas/UserConfiguredTemplateMetadata'
